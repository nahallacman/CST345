KCPSM6 Assembler log file for program 'C:\Users\cal\Desktop\School\CST345\Midterm\Problem01\picoblazeDemo\asm\SIMPLE.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 15 Feb 2015
Assembly timestamp: 22:05:41

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 3FF hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 40
Memory locations available: 4056


Assembly listing

 Addr Code                       Instruction

 000                             ; SIMPLE.psm
 000                             ;##########################################################################
 000                             ;## Company:            Oregon Institute of Technology
 000                             ;## Author(s):          Cal Barkman (nahallacman@gmail.com or callahan.barkman@gmail.com)
 000                             ;##
 000                             ;## Creation Date:      2/12/2015
 000                             ;## Revision:           1
 000                             ;## Program Purpose:    Picoblaze program to enter keystrokes from the keypad
 000                             ; on the PMOD1 header to the 4x7seg display, shifting recorded keystrokes
 000                             ; across the 4x7seg display. A pressed button clears the screen to 0's.
 000                             ;##########################################################################
 000                             ;## Assembler Directives
 000                             ;##########################################################################
 000                             CONSTANT KEYPAD, 01                ; Keypad address = port 01 (input)
 000                             CONSTANT BUTTON, 02                ; Button address = port 02 (input)
 000                             CONSTANT out7SEG0, 01              ; 7seg bank 0 address = port 01 (output)
 000                             CONSTANT out7SEG1, 02              ; 7seg bank 1 address = port 02 (output)
 000                             CONSTANT out7SEG2, 03              ; 7seg bank 2 address = port 03 (output)
 000                             CONSTANT out7SEG3, 04              ; 7seg bank 3 address = port 04 (output)
 000                             CONSTANT LEDS, 05                  ; LED bank output = port 5 (output)
 000                             NAMEREG sA, r7seg0
 000                             NAMEREG sB, r7seg1
 000                             NAMEREG sC, r7seg2
 000                             NAMEREG sD, r7seg3
 000                             NAMEREG sE, keypad_value
 000                             NAMEREG sF, last_int_flag
 000                             ;##########################################################################
 000                             ; Main Program
 000                             ;##########################################################################
 000                 initialize: 
 000  28000                      DISABLE INTERRUPT                  ; turn interrupts off for now
 001                       main: 
 001                             ;for debugging turn off the LEDS
 001  01E00                      LOAD sE[keypad_value], 00
 002  09E01                      INPUT sE[keypad_value], 01[KEYPAD]
 003  005E0                      LOAD s5, sE[keypad_value]          ; use another register
 004  03510                      AND s5, 10                         ; mask the value
 005  1C5F0                      COMPARE s5, sF[last_int_flag]      ; check if the interrupt_keypad flag has changed
 006  30015                      CALL Z, 015[flag_changed]
 007                             ; check if a button is pressed, if it is, clear the 7 seg registers
 007                             ; first, load switch vale
 007  09302                      INPUT s3, 02[BUTTON]
 008                             ;then compare it to the inactive value
 008  1D300                      COMPARE s3, 00
 009                             ;and jump if no button is pressed
 009  3200F                      JUMP Z, 00F[no_button_pressed]
 00A                             ;if the switch is pressed, clear the registers
 00A  01A00                      LOAD sA[r7seg0], 00
 00B  01B00                      LOAD sB[r7seg1], 00
 00C  01C00                      LOAD sC[r7seg2], 00
 00D  01D00                      LOAD sD[r7seg3], 00
 00E                             ;and for debugging, turn on the LEDS
 00E  01EFF                      LOAD sE[keypad_value], FF
 00F          no_button_pressed: 
 00F  2DA01                      OUTPUT sA[r7seg0], 01[out7SEG0]    ; Write the 7 seg output to the appropriate registers
 010  2DB02                      OUTPUT sB[r7seg1], 02[out7SEG1]
 011  2DC03                      OUTPUT sC[r7seg2], 03[out7SEG2]
 012  2DD04                      OUTPUT sD[r7seg3], 04[out7SEG3]
 013  2DE05                      OUTPUT sE[keypad_value], 05[LEDS]
 014  22001                      JUMP 001[main]                     ; Loop Back to top of main
 015                             ;##########################################################################
 015                             ;subroutine for interpreting keypad key presses
 015               flag_changed: 
 015  00F50                      LOAD sF[last_int_flag], s5         ; write the change in flag so we don't re-trigger on the same edge
 016  006E0                      LOAD s6, sE[keypad_value]          ; use another register
 017  03610                      AND s6, 10                         ; mask the value
 018  1D610                      COMPARE s6, 10
 019  3201C                      JUMP Z, 01C[shift_7seg_display]    ; if the int line is high, read and shift the 7 seg display
 01A  25000                      RETURN                             ;if not, return
 01B  01EF0                      LOAD sE[keypad_value], F0
 01C         shift_7seg_display: 
 01C  00AB0                      LOAD sA[r7seg0], sB[r7seg1]
 01D  00BC0                      LOAD sB[r7seg1], sC[r7seg2]
 01E  00CD0                      LOAD sC[r7seg2], sD[r7seg3]
 01F  00DE0                      LOAD sD[r7seg3], sE[keypad_value]
 020  25000                      RETURN                             ;done and return
 021                             ; Interrupt handling
 021                             ;------------------------------------------------------------------------------------
 2B0                             ADDRESS 2B0
 2B0                int_routine: 
 2B0  09E01                      INPUT sE[keypad_value], 01[KEYPAD]
 2B1  00AB0                      LOAD sA[r7seg0], sB[r7seg1]
 2B2  00BC0                      LOAD sB[r7seg1], sC[r7seg2]
 2B3  00CD0                      LOAD sC[r7seg2], sD[r7seg3]
 2B4  00DE0                      LOAD sD[r7seg3], sE[keypad_value]
 2B5  29001                      RETURNI ENABLE
 3FF                             ADDRESS 3FF                        ;set interrupt vector
 3FF  222B0                      JUMP 2B0[int_routine]


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\cal\Desktop\School\CST345\Midterm\Problem01\picoblazeDemo\asm\SIMPLE.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   22'd         
 timestamp_minutes 05'd         
 timestamp_seconds 41'd         
 datestamp_year    15'd         
 datestamp_month   2'd          
 datestamp_day     15'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 KEYPAD            01           SIMPLE.psm
 BUTTON            02           SIMPLE.psm
 out7SEG0          01           SIMPLE.psm
 out7SEG1          02           SIMPLE.psm
 out7SEG2          03           SIMPLE.psm
 out7SEG3          04           SIMPLE.psm
 LEDS              05           SIMPLE.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "15 Feb 2015"  
 timestamp$        "22:05:41"     



List of line labels

   Label                Addr  Source PSM File

 * initialize           000   SIMPLE.psm
   main                 001   SIMPLE.psm
   no_button_pressed    00F   SIMPLE.psm
   flag_changed         015   SIMPLE.psm
   shift_7seg_display   01C   SIMPLE.psm
   int_routine          2B0   SIMPLE.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             18
 STAR              -

 AND               2
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               -
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           3
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             3
 OUTPUT            5
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           1
 ENABLE            -
 RETURNI           1

 JUMP              4
 JUMP@             -
 CALL              1
 CALL@             -
 RETURN            2
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
