; SIMPLE.psm
;##########################################################################
;## Company:            Oregon Institute of Technology
;## Author(s):          Cal Barkman (nahallacman@gmail.com or callahan.barkman@gmail.com)
;##  
;## Creation Date:      2/17/2015
;## Revision:           1
;## Program Purpose:    "Microwave Timer" problem. Put in a timer amount, 
;	run the timer for that amount of (seconds? minutes?), then turn on an alarm
; 	for 5 seconds and flash an LED for the same amount of time
; 	
; 
;
;##########################################################################
;## Assembler Directives
;##########################################################################
#EQU KEYPAD, 0x01    ;CONSTANT KEYPAD, 01           	 ; Keypad address = port 01 (RDPRT)
#EQU BUTTON, 0x02	  ;CONSTANT BUTTON, 02				 ; Button address = port 02 (RDPRT)
#EQU out7SEG0, 0x01 ;CONSTANT out7SEG0, 01               ; 7seg bank 0 address = port 01 (WRPRT)
#EQU out7SEG1, 0x02 ;CONSTANT out7SEG1, 02               ; 7seg bank 1 address = port 02 (WRPRT)
#EQU out7SEG2, 0x03 ;CONSTANT out7SEG2, 03               ; 7seg bank 2 address = port 03 (WRPRT)
#EQU out7SEG3, 0x04 ;CONSTANT out7SEG3, 04               ; 7seg bank 3 address = port 04 (WRPRT)
#EQU LEDS, 0x05	;CONSTANT LEDS, 05					; LED bank WRPRT = port 5 (WRPRT)

; labels for state machine
#EQU s_INPUT, 0x01
#EQU s_COUNTDOWN, 0x02
#EQU s_ALARM, 0x03

#EQU CODE_LED, 0x01
#EQU DOOR_LED, 0x02

#EQU r7seg0, sA;NAMEREG sA, r7seg0
#EQU r7seg1, sB;NAMEREG sB, r7seg1
#EQU r7seg2, sC;NAMEREG sC, r7seg2
#EQU r7seg3, sD;NAMEREG sD, r7seg3
#EQU keypad_value, sE;NAMEREG sE, keypad_value
#EQU last_int_flag, sF;NAMEREG sF, last_int_flag
#EQU int_count, s9
#EQU int_done_count, s8
#EQU int_state, s7
#EQU char_count, s1
#EQU output_leds, s2 ; LED 0 = door open, LED 1 = problem
#EQU correct_code, s0
#EQU int_keypad_value, s4
;##########################################################################
; Main Program
;##########################################################################
initialize:
;DISABLE INTERRUPT ; turn interrupts off for now
INT DISABLE
LOAD int_state, s_INPUT
LOAD output_leds, 0x00
main:
COMP int_state, s_INPUT ; if state != s_INPUT
JUMP NZ, no_button_pressed ; skip all of the input until state is s_INPUT again
RDPRT keypad_value, KEYPAD
LOAD s5, keypad_value ; use another register
;AND s5, 0x10 ; mask the value
AND s5, 0x10 ; mask the value
COMP s5, last_int_flag ; check if the interrupt_keypad flag has changed
CALL NZ, flag_changed

; check if a button is pressed, if it is, clear the 7 seg registers
; first, load switch vale
    RDPRT s3, BUTTON
;then compare it to the inactive value
    COMP s3, 0x00
;and jump if no button is pressed
    JUMP Z, no_button_pressed
;if the switch is pressed, clear the registers
	LOAD r7seg0, 0x00
	LOAD r7seg1, 0x00
	LOAD r7seg2, 0x00
	LOAD r7seg3, 0x00
;and for debugging, turn on the LEDS
	LOAD keypad_value, 0xFF

no_button_pressed:
    WRPRT r7seg0, out7SEG0    ; Write the 7 seg WRPRT to the appropriate registers
	WRPRT r7seg1, out7SEG1   
	WRPRT r7seg2, out7SEG2   
	WRPRT r7seg3, out7SEG3   
	;WRPRT keypad_value, LEDS ; output debugging LED's
	WRPRT output_leds, LEDS ; output door and problem leds
    JUMP main               ; Loop Back to top of main
;##########################################################################

;subroutine for interpreting keypad key presses
flag_changed:
LOAD  last_int_flag, s5 ; write the change in flag so we don't re-trigger on the same edge
LOAD s6, keypad_value ; use another register
AND s6, 0x10 ; mask the value
COMP s6, 0x10
JUMP Z, key_press  ; if the int line is high, a keypress has been detected
RET;if not, return


;HERE: the state machine should pick where in the sequence to put things

;a proper keypress has been read. Based on the key value, branch
;if 0-9 is pressed, shift key in
key_press:
AND keypad_value, 0x0F ; mask off the interrupt bit
COMP keypad_value, 0x0A ; check if the value is lower than ten
JUMP C, shift_7seg_display
;if C is pressed, clear the display
COMP keypad_value, 0x0C ; check if the value is clear
JUMP Z, reset
;if E is pressed, start the timer
COMP keypad_value, 0x0E
JUMP Z, begin_timer
RET; if the keypress is any other value, ignore it

shift_7seg_display:
;increment number of key presses
ADD char_count, 0x01
;check if less than 4 key presses have been made
COMP char_count, 0x04
JUMP NC, no_shift ; if they have, ignore the input

;else shift the display down
LOAD r7seg0, r7seg1
LOAD r7seg1, r7seg2
LOAD r7seg2, r7seg3
LOAD r7seg3, keypad_value

no_shift:
;else
;set up the interrupt for 5 seconds
;LOAD int_done_count, 0x05
;LOAD int_state, s_LOAD
;INT ENABLE
RET;done and return

reset:
	LOAD r7seg0, 0x00 ; clear the 7 seg display
	LOAD r7seg1, 0x00
	LOAD r7seg2, 0x00
	LOAD r7seg3, 0x00
	;clear the number of keys entered
	LOAD char_count, 0x00
	;dont forget to add a lock the door option here
	;AND output_leds, CODE_LED ; mask off the door open LED
	
	;make sure the alarm doesn't go off after clearing
	LOAD int_state, s_INPUT
	RET;done and return

begin_timer:
;maybe make sure at least one key has been pressed?
COMP char_count, 0x00
JUMP Z, reset
;now check if the leading digit is a 9.
COMP r7seg1, 0x09
JUMP NZ, not_nine
;If it is, make sure the next two are 0's, else reset (since there is nothing that can be done with above 9:00?) (8:99 is fine)
COMP r7seg2, 0x00
JUMP NZ, reset
COMP r7seg3, 0x00
JUMP NZ, reset
not_nine:
;take away keypad control and begin the timer
LOAD int_state, s_COUNTDOWN
RETI ENABLE ; return and enable interrupts so the countdown can begin


; Interrupt handling
;------------------------------------------------------------------------------------
;ADDRESS 2B0
#org 0x2B0
int_routine:
;this section may be unnecessary for the countdown timer stuff. it would probably be easier to just rawly interpret the count part
;ADD int_count, 0x01 ; increment count
;COMP int_done_count, int_count ; check if the counter is done
;JUMP Z, int_done
;RETI ENABLE

;int_done:
;LOAD int_count, 0x00 ; reset count
;if state == s_LOAD
COMP int_state, s_INPUT
JUMP Z, int_input
;if state == s_OPEN
COMP int_state, s_COUNTDOWN
JUMP Z, int_countdown_keypressdetect
;if state == s_INCORRECT
COMP int_state, s_ALARM
JUMP Z, int_alarm

;??? else return and disable?
RETI DISABLE

;this shouldn't ever be reached?
int_input:
RETI DISABLE

int_countdown_keypressdetect:
RDPRT int_keypad_value, KEYPAD ;read the keypad
AND int_keypad_value, 0x10 ; mask off the keypad value
COMP int_keypad_value, 0x10 ; if a key is pressed
JUMP NZ, int_countdown ;not pressed
RDPRT int_keypad_value, KEYPAD ; read again just in case? (running out of registers)
AND int_keypad_value, 0x0F
COMP int_keypad_value, 0x0C;	if the key is "C", reset everything
CALL Z, reset ; do I jump or call here?
;RETI DISABLE ; return and disable interrupts so we stop counting
;	else just keep the same count
JUMP countdown_continue
;if no key is pressed, 

;every time this is entered, count the 7 seg display values down by one
;if the units column is 0, check if tens is greater than 0, if it is, minus one from tens and put 9 in units
;repeat with hundreds column, but put 6 in tens instead
;if all three are 0, begin the alarm sequence
int_countdown:
COMP r7seg3, 0x00
JUMP Z, carry_tens ; if it is 0, try to carry from the tens
SUB r7seg3, 0x01 ; if it is not 0, subtract one and keep going
JUMP countdown_continue
carry_tens:
COMP r7seg2, 0x00 
JUMP Z, carry_hundreds ; if it is 0, try to carry from the hundreds
SUB r7seg2, 0x01 ; if it is not 0, subtract one 
ADD r7seg3, 0x09; and add 9 to the units, and keep going
JUMP countdown_continue
carry_hundreds:
COMP r7seg1, 0x00 
JUMP Z, countdown_done ; if it is 0, we can't carry anymore, so we are done counting
SUB r7seg1, 0x01 ;else, we subtract one from hundreds
LOAD r7seg2, 0x05; make the tens 5
LOAD r7seg3, 0x09; and units 9, and keep going
JUMP countdown_continue
countdown_done:
LOAD int_state, s_ALARM ; when we are done, move the state machine on to the alarm part
LOAD int_count, 0x00; just in case, reload the count with 0
LOAD last_int_flag, 0x00 ; not sure where to put this, but the interrupt machine doesn't work when I return without this
countdown_continue:
RETI ENABLE ; make sure we are still enabled so we keep interrupting

;every time this is entered, count down the current time (which should be started at 5) until it reaches 0
;at 0, disable the alarm, and set the state machine back to input
int_alarm:
LOAD output_leds, 0x03 ;turn on ALARM LED and blinking LED
COMP int_count, 0x05 ; check if 5 seconds have passed
JUMP Z, int_alarm_done
ADD int_count, 0x01 ; if not done, add 1 and return
RETI ENABLE

int_alarm_done:
LOAD output_leds, 0x00 ;turn off ALARM LED and blinking LED
LOAD int_count, 0x00; reset the alarm sequence
CALL reset ; this will clear the 7seg display and character count
LOAD int_state, s_INPUT ; reset the state machine
RETI DISABLE ; disable interrupts as we leave so we don't have any more counting instances

;setup interrupt vector
#org 0x3FF
JUMP int_routine 
;ADDRESS 3FF			;set interrupt vector
;JUMP int_routine
